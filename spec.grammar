API_DOCUMENT :
    {
        "sections" required : SECTION_LIST,
        "methods" required : {
            string: METHOD
        },
        "schemas" required : {
            "string" required : {
                string: STRING_SCHEMA
            },
            "json" required : {
                string: JSON_SCHEMA
            }
        },
        "templates" optional : {
            "response" optional : {
                string: RAW_RESPONSE
            }
            "parameter" optional : {
                string: RAW_PARAMETER
            }
        }
    }


SECTION_LIST :
    [ SECTION, SECTION, ... ]


SECTION :
    {
        "name" required : string,
        "summary" optional : string,
        "description" optional : MARKDOWN,
        "methods" required : [ string, string, ... ]     // list of methods identified by the property keys found in API_DOCUMENT."methods"
    }


METHOD :
    {
        "method" required : string,            // "GET", "PUT", "POST", etc.
        "location" required : string,          // path (e.g. /api/v1/people) or location (e.g. Root)
        "location_type" required : string,              // one of "absolute" (http://...), "relative" (/v1/foo), or "symbolic" (Root)
        "summary" optional : string,           //
        "description" optional : MARKDOWN,       //
        "request" required : REQUEST,          //
        "response" required : RESPONSE_LIST    // possible responses
    }


REQUEST :
    {
        "path" optional : PARAMETER_LIST,      //
        "query" optional : PARAMETER_LIST,     //
        "header" optional : PARAMETER_LIST,    //
        "body" optional : BODY_LIST    // ????? should this be a BODY? an object of Content-Type: BODY?
    }


RESPONSE_LIST :
    [ RESPONSE, RESPONSE, ... ]


RESPONSE :
    string        // matches key in API_DOCUMENT."templates"."response"

    RAW_RESPONSE


RAW_RESPONSE :
    {
        "name" optional : string,
        "description" optional : MARKDOWN,
        "statusCode" required : number,
        "statusMessage" optional : string,
        "header" optional : PARAMETER_LIST
        "body" optional : BODY_LIST    // ????? should this be a BODY? an object of Content-Type: BODY?
    }


BODY_LIST :
    [ BODY, BODY, ... ]


BODY :
    {
        "type" required : "binary"
        "contentType" optional : string            // default "application/octet-stream"
    }

    {
        "type" required : "form",
        "contentType" optional : string,           // default "application/x-www-form-urlencoded"
        "parameters" required : PARAMETER_LIST
    }

    {
        "type" required : "json",
        "contentType" optional : string,           // default "application/json"
        "description" optional : MARKDOWN,
        "schema" required : JSON_SCHEMA
    }


PARAMETER_LIST :
    [ PARAMETER, PARAMETER, ... ]


PARAMETER :
    string        // matches key in API_DOCUMENT."templates"."parameter"

    RAW_PARAMETER


RAW_PARAMETER :
    {
        "name" required : STRING_SCHEMA,
        "description" optional : MARKDOWN,
        "frequency" required : string,
        "value" required : STRING_SCHEMA
    }


STRING_SCHEMA :
    // literal
    string

    // schema
    {
        "description" optional : MARKDOWN,
        "criteria" optional : [ MARKDOWN, MARKDOWN, ... ],
        "examples" optional : [ string, string, ... ]
    }

    // reference to another type
    {
        "ref" required : string        // matches key in API_DOCUMENT."schemas"."string"
    }

    {
        "oneOf" required : STRING_SCHEMA_LIST,
        "description" optional : MARKDOWN
    }


STRING_SCHEMA_LIST :
    [ STRING_SCHEMA, STRING_SCHEMA, ... ]


JSON_SCHEMA :
    // literal
    {
        "literal" required : anything
    }

    // reference to another type
    {
        "ref" required : string        // matches key in API_DOCUMENT."schemas"."json"
    }

    {
        "sref" required : string        // matches key in API_DOCUMENT."schemas"."string"
    }

    {
        "oneOf" required : JSON_SCHEMA_LIST,
        "description" optional : MARKDOWN
    }

    {
        "type" required : "null",
        "description" optional : MARKDOWN
    }

    {
        "type" required : "boolean",
        "description" optional : MARKDOWN
    }

    {
        "type" required : "number",
        "description" optional : MARKDOWN,
        "criteria" optional : [ MARKDOWN, MARKDOWN, ... ],
        "examples" optional : [ string, string, ... ]
    }

    {
        "type" required : "string",
        "description" optional : MARKDOWN,
        "format" optional : STRING_SCHEMA
    }

    {
        "type" required : "array",
        "description" optional : MARKDOWN,
        "criteria" optional : [ MARKDOWN, MARKDOWN, ... ],
        "examples" optional : [ string, string, ... ],
        "items" required : JSON_ITEMS
    }

    {
        "type" required : "object",
        "description" optional : MARKDOWN,
        "criteria" optional : [ MARKDOWN, MARKDOWN, ... ],
        "examples" optional : [ string, string, ... ],
        "properties" required : JSON_PROPERTY_LIST
    }


JSON_SCHEMA_LIST :
    [ JSON_SCHEMA, JSON_SCHEMA, ... ]


JSON_ITEMS :
    JSON_ITEM_LIST

    JSON_SCHEMA


JSON_ITEM_LIST :
    [ JSON_ITEM, JSON_ITEM, ... ]


JSON_ITEM :
    {
        "index" required : string,
        "description" optional : MARKDOWN,
        "value" required : JSON_SCHEMA
    }


JSON_PROPERTY_LIST :
    [ JSON_PROPERTY, JSON_PROPERTY, ... ]


JSON_PROPERTY :
    {
        "key" required : STRING_SCHEMA,
        "description" optional : MARKDOWN,
        "frequency" required : string,
        "value" required : JSON_SCHEMA
    }


MARKDOWN :
    string    // to be formatted as Markdown
